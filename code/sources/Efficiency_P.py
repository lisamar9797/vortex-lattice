"""
Date: Q4 2023 - Q1 2024
Author: Lisa Martinez
Institution: Technical University of Madrid

Description: This function computes the propeller efficiency.
"""


import sources.Variables as Var
import numpy as np
from sources.Mid_Vect_Propeller_P import Mid_Vect_Propeller
from sources.Weight_Function_Propeller_P import Weight_function_propeller
from sources.Skin_Friction_Drag_P import Skin_Friction_Drag
from sources.Advance_Ratio_P import Advance_Ratio_J


def Efficiency():

    I_P_Points_P = (Var.Msp*Var.Nch)
    Panel, Gamma_Panel_P = np.loadtxt("output/Propeller_Gamma_Blade.txt",skiprows = 1,unpack= True)
    T_fr_P, Q_fr_P = Skin_Friction_Drag()
    Weight_P = Weight_function_propeller()
    V_Tot_P = np.loadtxt("output/Propeller_Velocity_Total.txt", skiprows=2, usecols= (2,3,4))
    V_Tot_P = np.reshape(V_Tot_P, (I_P_Points_P, 4, 3))
    Advance_ratio = Advance_Ratio_J()

    # THRUST AND TORQUE (WITHOUT SKIN FRICTION DRAG)

    Thr = 0
    Tor = 0

    T_tot_P = 0                 # Initialization of the temporary variable used to calculate T
    Tor_tot_P = 0

    Q1_tot = 0                  # Initialization of the temporary variable used to calculate Q1
    Q2_tot = 0                  # Initialization of the temporary variable used to calculate Q2

    for m in range (Var.Msp):            # Spanwise loop
        npl_TE = (m-1)*Var.Nch

        T_0 = 0           # Initialization of the temporary variable used to calculate T
        Q_10 = 0          # Initialization of the temporary variable used to calculate Q1
        Q_20 = 0          # Initialization of the temporary variable used to calculate Q2

        for n in range (Var.Nch):                 # Chordwise loop
            npl = n + (m-1)*Var.Nch

            T_00 = 0            # Initialization of the temporary variable used to calculate T
            Q_100 = 0           # Initialization of the temporary variable used to calculate Q1
            Q_200 = 0           # Initialization of the temporary variable used to calculate Q2

            for k in range (4):                # Panel loop
                xkx,xky,xkz,xlk,ylk,zlk = Mid_Vect_Propeller(npl,k)
                # This subroutine is used to calculate the characteristics of the side k panel npl

                T_00 = T_00 + zlk*V_Tot_P[npl,k,1] - ylk*V_Tot_P[npl,k,2]
                # Thrust generated by side k panel npl without taking into account of the weight function

                Q_100 = Q_100 + xky*ylk*V_Tot_P[npl,k,0] - xky*xlk*V_Tot_P[npl,k,1]
                #Torque Q1 generated by side k panel npl without taking into account of the weight function

                Q_200 = Q_200 + xkz*xlk*V_Tot_P[npl,k,2]- xkz*zlk*V_Tot_P[npl,k,0]
                #Torque Q2 generated by side k panel npl without taking into account of the weight function

            T_0 = T_0 + Weight_P[m,n] * T_00
            # Thrust generated by the panel npl taking into account of the weight function
            Q_10 = Q_10 + Weight_P[m,n] * Q_100
            # Torque Q1 generated by the panel npl taking into account of the weight function
            Q_20 = Q_20 + Weight_P[m,n] * Q_200
            # Torque Q2 generated by the panel npl taking into account of the weight function

        xkx,xky,xkz,xlk,ylk,zlk = Mid_Vect_Propeller(npl_TE,3)

        T_tot_P = T_tot_P + Gamma_Panel_P[npl_TE]*T_0 - Gamma_Panel_P[npl_TE
        ]*zlk*V_Tot_P[npl_TE,3,1] + Gamma_Panel_P[npl_TE]*ylk*V_Tot_P[npl_TE,3,2]          # No thrust generated by T.E. side

        Q1_tot = Q1_tot + Gamma_Panel_P[npl_TE]*Q_10 - Gamma_Panel_P[npl_TE
        ]*xky*ylk*V_Tot_P[npl_TE,3,0] + Gamma_Panel_P[npl_TE]*xky*xlk*V_Tot_P[npl_TE,3,1]  # No torque generated by T.E. side

        Q2_tot = Q2_tot + Gamma_Panel_P[npl_TE]*Q_20 - Gamma_Panel_P[npl_TE
        ]*xkz*xlk*V_Tot_P[npl_TE,3,2] + Gamma_Panel_P[npl_TE]*xkz*zlk*V_Tot_P[npl_TE,3,0]  # No torque generated by T.E. side

    # EFFICIENCY

    Thr = Var.rho*float(Var.Z_Blade_P)*T_tot_P + T_fr_P*Var.Z_Blade_P    # Total thrust given by the propeller
    Tor = Var.rho*float(Var.Z_Blade_P)*Q1_tot - Var.rho*float(Var.Z_Blade_P)*Q2_tot + Q_fr_P*Var.Z_Blade_P
    # Total torque given by the propeller

    K_T = Thr / (Var.rho * (Var.Omega/(2*np.pi))**2 * (Var.Rad_P*2)**4)    # Thrust coefficient

    K_Q = Tor / (Var.rho * (Var.Omega/(2*np.pi))**2 * (Var.Rad_P*2)**5)    # Torque coefficient

    Eff = Advance_ratio * K_T / abs(2 * np.pi * K_Q)                       # Efficiency
    C_th = Thr/(0.5*Var.rho*Var.V_Ship**2*np.pi*Var.Rad_P**2)

    with open("output/Propeller_Efficiency.txt", mode='w') as file:
        file.write("Efficiency\n")
        file.write("{:13.9f}\n".format(Eff))

    with open("output/Propeller_Forces.txt", mode='w') as file:
        file.write("      K_T            K_Q            T            Q            Cth\n")
        file.write("{:13.9f}   {:13.9f}   {:10.1f}   {:10.1f}   {:13.9f}\n".format(K_T, -K_Q, Thr, Tor, C_th))
    return Eff, K_T, K_Q


Eff, K_T, K_Q = Efficiency()
